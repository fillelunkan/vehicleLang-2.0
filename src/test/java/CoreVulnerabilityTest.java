import org.junit.Test;
import org.junit.After;

import vehicle.*;
import core.*;

public class CoreVulnerabilityTest {

   @Test
   public void testVulnerability() {

      Software userland = new Software("Userland");
      Software kernel = new Software("Kernel");
      Account root = new Account("RootAccount");
      Account user = new Account("UserAccount");
      Vulnerability privEsc = new Vulnerability("PrivEsc");

      kernel.addAccount(root);
      userland.addAccount(user);
      userland.addExecutor(kernel);
      userland.addAccessVulnerabilities(privEsc);
      privEsc.addPrivileges(root);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(userland.connect);
      attacker.addAttackPoint(user.compromise);

      attacker.attack();

      userland.access.assertCompromisedInstantaneously();
      kernel.connect.assertCompromisedInstantaneously();
      privEsc.exploit.assertCompromisedWithEffort();
      root.compromise.assertCompromisedWithEffort();
      kernel.access.assertCompromisedWithEffort();
   }

   @Test
   public void testSoftware() {
      Machine machine = new Machine("Machine");
      Software software = new Software("Software");
      Vulnerability vulnerability = new Vulnerability("Vulnerability");

      machine.addExecutees(software);
      software.addConnectionVulnerabilities(vulnerability);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(machine.access); // Changed it to access because cannot connect to software without machine.access
      
      attacker.attack();

      vulnerability.exploit.assertCompromisedWithEffort();
    }

    @After
    public void deleteModel() {
            Asset.allAssets.clear();
            AttackStep.allAttackSteps.clear();
            Defense.allDefenses.clear();
    }

}
